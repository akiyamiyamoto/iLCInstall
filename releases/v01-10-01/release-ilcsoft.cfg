##############################################################################
#
# Configuration file for installing ILC Software release v01-10
#
# This cfg file assumes the base-level tools from release_v01-10-base.cfg
# are already installed and available in your system (base-level tools are the
# tools which are set as 'ilcsoft.link' at the end of this file
#
# If you do not have this tools available on your system you can install them
# with the configuration file release_v01-09-base.cfg or alternatively
# install all software with release_v01-09-scratch.cfg (please check
# release_v01-09-base.cfg for more details)
#
# Please do not forget to modify the directories in this cfg file
# according to your system !!
#
# Author: F. Gaede, J. Engels, DESY
# Date: Jun 30, 2010
#
##############################################################################

import os, sys

# read package versions from external file
path_where_this_file_lives = os.path.dirname( config_file )
versions_file = os.path.join( path_where_this_file_lives, "release-versions.py" )
execfile( versions_file )

# installation directory
if not 'ilcsoft_install_dir' in dir():
    if not 'ilcsoft_install_prefix' in dir():
        # default install prefix
        ilcsoft_install_prefix = "$HOME/ilcsoft"

    ilcsoft_install_dir = os.path.join( ilcsoft_install_prefix, ilcsoft_release )

ilcsoft = ILCSoft( ilcsoft_install_dir )


# python variable for referring the ILC Home directory
# used to link or use already installed packages (SL4 or SL5)
# --- set in release-versions.py ---
#ilcPath = "/afs/desy.de/group/it/ilcsoft/"
#ilcPath = '/afs/desy.de/project/ilcsoft/sw/i386_gcc34_sl4/'
if not 'ilcPath' in dir():
    "raise ilcPath not set"

ilcPath = os.path.normpath( ilcPath ) + '/' # make sure there it ends with /

# global options
ilcsoft.env["MAKEOPTS"]="-j4"
ilcsoft.env["CXX"]="g++"
ilcsoft.env["CC"]="gcc"
ilcsoft.env["FC"]="gfortran"
if( ilcsoft.os.isSL(4) ):
    ilcsoft.env["FC"]="g77"

#--------- uncomment the following to build 32-bit mode on 64bit machines---
# default is now 64bit-native build
# (note: you need a 64-bit version of cernlib pre-installed ) 
#
#ilcsoft.env["CXXFLAGS"]="-m32"
#ilcsoft.env["CFLAGS"]="-m32"
#ilcsoft.env["FFLAGS"]="-m32"
#ilcsoft.env["LDFLAGS"]="-m32"

#--------- set to 'OFF' to build 64-bit natively -------
ilcsoft.envcmake["BUILD_32BIT_COMPATIBLE"]="OFF"
#----------------------------------------------------------------

#ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "Debug"
ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "RelWithDebInfo"
ilcsoft.downloadType = "svn"

# additional system pathes for FIND_LIBRARY, FIND_PATH
#-----------------------------------------------
#ilcsoft.env["CMAKE_LIBRARY_PATH"]="/usr/lib/gcc/i386-redhat-linux/3.4.3:/another/path/lib"
#ilcsoft.env["CMAKE_INCLUDE_PATH"]="/usr/include/c++/3.4.3:/another/path/include"
#-----------------------------------------------


###########################################################

ilcsoft.install( LCCD( LCCD_version ))

ilcsoft.install( Marlin( Marlin_version ))
ilcsoft.module("Marlin").envcmake["MARLIN_GUI"] = 1 

ilcsoft.install( MarlinUtil( MarlinUtil_version ))


ilcsoft.install( Mokka( Mokka_version ))
#ilcsoft.module("Mokka").env["MOKKA_DEBUG"]=1
#ilcsoft.module("Mokka").env["MOKKA_PACK_LIBS"]=1 # FIXME: CAUSES TOO MUCH LIB DEPENDENCIES .... TO BE SOLVED !!

#----------  standard reco packages

ilcsoft.install( MarlinReco( MarlinReco_version )) 


ilcsoft.install( PandoraPFA( PandoraPFA_version ))
ilcsoft.install( PandoraPFANew( PandoraPFANew_version ))
ilcsoft.install( MarlinPandora( MarlinPandora_version ))


ilcsoft.install( LCFIVertex( LCFIVertex_version ))

ilcsoft.install( CEDViewer( CEDViewer_version )) 

ilcsoft.install( Overlay( Overlay_version ))  

ilcsoft.install( FastJetClustering( FastJetClustering_version ))

#---------test beam packages 

ilcsoft.install( Eutelescope( Eutelescope_version ))    

ilcsoft.install( MarlinTPC( MarlinTPC_version ))  

ilcsoft.install( SiliconDigi( SiliconDigi_version ))

ilcsoft.install( Druid( Druid_version ))

ilcsoft.install( Garlic( Garlic_version ))



ilcsoft.install( RAIDA( RAIDA_version ))

ilcsoft.install( KalTest( KalTest_version ))
ilcsoft.install( KalDet( KalDet_version ))


####################################################################
#
# the following tools are installed in afs:
#
# - for SL4 (32bit) under:
#
#     /afs/desy.de/project/ilcsoft/sw/i386_gcc34_sl4/
#
# - for SL5 (32bit) under:
#
#     /afs/desy.de/project/ilcsoft/sw/i386_gcc41_sl5/
#
# - for SL5 (64bit) under:
#
#     /afs/desy.de/project/ilcsoft/sw/x86_64_gcc41_sl5
#
# they can be linked from there or need to be installed on your system
#
####################################################################


#----- configs ------------------------------------------------------
ilcsoft.link( ConfigPKG( "StandardConfig", ilcPath + "StandardConfig/" + StandardConfig_version ) )
stdconf = ilcsoft.module( "StandardConfig")
stdconf.env["STANDARDCONFIG"]=stdconf.installPath

ilcsoft.link( ConfigPKG( "MokkaDBConfig", ilcPath + "MokkaDBConfig/" + MokkaDBConfig_version ) ) 
mokkadbconf = ilcsoft.module( "MokkaDBConfig")
mokkadbconf.download.root = "ilctools"
mokkadbconf.envorder=["MOKKADBCONFIG"]
mokkadbconf.env["MOKKADBCONFIG"]=mokkadbconf.installPath
mokkadbconf.env["MOKKA_DUMP_FILE"]="$MOKKADBCONFIG/mokka-dbdump.sql.tgz"
mokkadbconf.envpath["PATH"].append( "$MOKKADBCONFIG/scripts" )

ilcsoft.link( ConfigPKG( "LCFI_MokkaBasedNets", ilcPath + "LCFI_MokkaBasedNets/" + LCFI_MokkaBasedNets_version ) )
lcfinets=ilcsoft.module( "LCFI_MokkaBasedNets" )
lcfinets.download.root = "tagnet"
lcfinets.env["LCFIMOKKABASEDNETS"]=lcfinets.installPath
#--------------------------------------------------------------------

ilcsoft.link( CED( ilcPath + "CED/" + CED_version ))

ilcsoft.link( GEAR( ilcPath + "gear/" + GEAR_version ))

ilcsoft.link( LCIO( ilcPath + "lcio/" + LCIO_version ))

ilcsoft.link( dcap( ilcPath + "dcap/" + dcap_version ))

ilcsoft.link( FastJet( ilcPath + "FastJet/" + FastJet_version ))

ilcsoft.link( ROOT( ilcPath + "root/" + ROOT_version ))

ilcsoft.link( CLHEP( ilcPath + "CLHEP/" + CLHEP_version ))
ilcsoft.link( GSL( ilcPath + "gsl/" + GSL_version ))
ilcsoft.link( MySQL( ilcPath + "mysql/" + MySQL_version ))
ilcsoft.link( CERNLIB( ilcPath + "cernlib/" + CERNLIB_version ))
ilcsoft.link( QT( ilcPath + "QT/" + QT_version ))

ilcsoft.link( CondDBMySQL( ilcPath + "CondDBMySQL/" + CondDBMySQL_version ))

# geant4
ilcsoft.use( Geant4 ( ilcPath + "geant4/" + Geant4_version ))
ilcsoft.module("Geant4").env["G4ENV_INIT"] = ilcPath + "geant4/env_" + Geant4_version + ".sh"

# Java
ilcsoft.link( Java( ilcPath + "java/" + Java_version ))

# cmake
ilcsoft.use( CMake( ilcPath + "CMake/" + CMake_version ))

ilcsoft.link( CMakeModules( ilcPath + "CMakeModules/" + CMakeModules_version ))

# end of configuration file

